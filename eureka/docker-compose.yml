---
version: '3'
services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    networks:
      - "dockernetflix-network"

    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

    # reachable on 9092 from the host and on 29092 from inside docker compose
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on:
        - zookeeper
    ports:
      - '9092:9092'
    networks:
      - "dockernetflix-network"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092, PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  init-kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: init-kafka
    networks:
      - "dockernetflix-network"
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
        "
        # blocks until kafka is reachable
        kafka-topics --bootstrap-server kafka:29092 --list

        echo -e 'Creating kafka topics'
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic bus --replication-factor 1 --partitions 1
        echo -e 'Successfully created the following topics:'
        kafka-topics --bootstrap-server kafka:29092 --list
      
        "

  eureka:
    image: eureka-app
    restart: always
    container_name: eureka-container
    ports:
     - "8761:8761"
    networks:
     - "dockernetflix-network"

  balancer:
    image: balancer-app
    restart: always
    container_name: balancer-container
    ports:
    - "8080:8080"
    networks:
      - "dockernetflix-network"
    depends_on:
      - eureka

  backweb1:
    image: backweb8081-app
    container_name: backend8081
    ports:
    - "8081:8081"

    networks:
      - "dockernetflix-network"
    environment:
      - "SPRING.DATASOURCE.URL=jdbc:h2:file:~/busDB1"


    depends_on:
      - kafka
      - eureka


  backweb2:
    image: backweb8082-app
    container_name: backend8082
    ports:
      - "8082:8082"

    networks:
      - "dockernetflix-network"
    environment:
          - "SPRING.DATASOURCE.URL=jdbc:h2:file:~/busDB2"

    depends_on:
      - kafka
      - eureka

  backweb3:
    image: backweb8083-app
    container_name: backend8083
    ports:
      - "8083:8083"

    networks:
      - "dockernetflix-network"
    environment:
      - "SPRING.DATASOURCE.URL=jdbc:h2:file:~/busDB3"


    depends_on:
      - kafka
      - eureka

  backempresa:
    image: backempresa-app
    container_name: backend8090
    ports:
      - "8090:8090"

    networks:
      - "dockernetflix-network"
    environment:
      - "SPRING.DATASOURCE.URL=jdbc:h2:file:~/busDB"

    depends_on:
      - kafka
      - eureka

networks:
  dockernetflix-network: #network para la conexion de todos los servicios a eureka






